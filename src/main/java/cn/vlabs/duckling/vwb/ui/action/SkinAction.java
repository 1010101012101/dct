/*
 * Copyright (c) 2008-2016 Computer Network Information Center (CNIC), Chinese Academy of Sciences.
 * 
 * This file is part of Duckling project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 */
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package cn.vlabs.duckling.vwb.ui.action;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;

import cn.vlabs.duckling.vwb.KeyConstants;
import cn.vlabs.duckling.vwb.VWBContainerImpl;
import cn.vlabs.duckling.vwb.VWBContext;
import cn.vlabs.duckling.vwb.service.config.ISiteConfig;
import cn.vlabs.duckling.vwb.service.resource.Resource;
import cn.vlabs.duckling.vwb.service.skin.Skin;
import cn.vlabs.duckling.vwb.service.skin.SkinService;
import cn.vlabs.duckling.vwb.spi.VWBContainer;
import cn.vlabs.duckling.vwb.ui.base.BaseDispatchAction;
import cn.vlabs.duckling.vwb.ui.command.VWBCommand;
import cn.vlabs.duckling.vwb.ui.form.SkinForm;

/**
 * MyEclipse Struts Creation date: 08-06-2009 XDoclet definition:
 * 
 */
public class SkinAction extends BaseDispatchAction {
	private static final char[] INVALID_CHARS = new char[] { '\\', '/', '\"',
			':', '*', '?', '|' };

	private String dctRoot;

	private String check(int siteId, SkinService skins, String skinname) {
		if (skinname == null || skinname.trim().length()==0){
			return "empty";
		}

		for (char ch : INVALID_CHARS) {
			if (skinname.indexOf(ch) != -1) {
				return "invalidchar";
			}
		}

		if (skinname.length() > 255)
			return "toolong";

		if (skins.exists(siteId, skinname))
			return "exist";
		return "OK";
	}

	private ActionForward doLayout(VWBContext context) {
		return layout(context, "/jsp/skin.jsp");
	}

	protected ActionForward dispatchMethod(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response, String name) throws Exception {
		if (name == null || name.equals("")) {
			name = "init";
		}
		Resource res = this.getSavedViewPort(request);
		VWBContext context = VWBContext.createContext(request,
				VWBCommand.ADMIN, res);
		request.setAttribute("isAdminSite", isAdminSite(context.getSiteId()));
		if (context.hasAccess(response)) {
			return super.dispatchMethod(mapping, form, request, response, name);
		} else
			return null;
	}

	private boolean isAdminSite(int siteId) {
		return siteId==VWBContainer.ADMIN_SITE_ID;
	}
	public ActionForward apply(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		SkinForm skinForm = (SkinForm) form;
		VWBContext context = VWBContext.getContext(request);
		SkinService skinService = VWBContext.getContainer().getSkinService();
		skinService.applySkin(context.getSiteId(),skinForm.isShared(), skinForm.getSkinname());
		return  renderSkinView(request);
	}

	public ActionForward check(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {

		SkinForm skinForm = (SkinForm) form;
		/*
		 * 功能代码移除
		 */
		SkinService ssi =VWBContainerImpl.findContainer().getSkinService();
		int siteId = VWBContainerImpl.findSite(request).getId();
		String errorMessage = check(siteId, ssi, skinForm.getSkinname());

		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(errorMessage);
		return null;
	}

	public String getDctRoot() {
		return dctRoot;
	}

	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		return renderSkinView(request);
	}
	
	private int getSkinSite(int siteId, HttpServletRequest request){
		if (isShared(request) && isAdminSite(siteId)){
			siteId=Skin.SHARE_SITE_ID;
		}
		return siteId;
	}
	
	private String getSkinTemplate(int siteId, HttpServletRequest request){
		if (isShared(request) && isAdminSite(siteId)){
			return request.getParameter("template");
		}
		return this.getSiteTemplate(VWBContext.getContext(request));
	}
	
	public ActionForward remove(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		SkinForm skinForm = (SkinForm) form;
		VWBContext context = VWBContext.getContext(request);
		SkinService ssi = VWBContext.getContainer().getSkinService();
		if (!ssi.remove(getSkinSite(context.getSiteId(),request), skinForm.getSkinname())) {
			request.setAttribute("message", "inuse");
		}
		return renderSkinView(request);
	}

	public void setDctRoot(String dctRoot) {
		this.dctRoot = dctRoot;
	}

	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		SkinForm skinForm = (SkinForm) form;
		VWBContext context = VWBContext.getContext(request);
		SkinService ssi = VWBContext.getContainer().getSkinService();
		FormFile file = skinForm.getFile();
		
		ssi.upload(getSkinSite(context.getSiteId(),request),getSiteTemplate(context), skinForm.getSkinname(), file.getInputStream(), file.getFileSize());

		return renderSkinView(request);
	}
	
	private String getSiteTemplate(VWBContext context){
		ISiteConfig siteConfig=VWBContext.getContainer().getSiteConfig();
		return siteConfig.getProperty(context.getSiteId(), KeyConstants.TEMPLATE_NAME);
	}
	
	private boolean isShared(HttpServletRequest request){
		if (request.getParameter("shared")!=null){
			return Boolean.parseBoolean(request.getParameter("shared"));
		}
		return false;
	}

	public ActionForward upload(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		SkinForm skinForm = (SkinForm) form;
		VWBContext context = VWBContext.getContext(request);
		SkinService ssi = VWBContainerImpl.findContainer().getSkinService();
		FormFile file = skinForm.getFile();
		int skinSiteId=getSkinSite(context.getSiteId(), request);
		String skinTemplate=getSkinTemplate(context.getSiteId(), request);
		ssi.upload(skinSiteId,skinTemplate, skinForm.getSkinname(),file.getInputStream(), file.getFileSize());
		return renderSkinView(request);
	}
	
	private ActionForward renderSkinView(HttpServletRequest request){
		request.setAttribute("templates", VWBContext.getContainer().getTemplateService().getAllSiteTemplate());
		int siteId=VWBContext.getContext(request).getSiteId();
		request.setAttribute("skins", VWBContainerImpl.findContainer().getSkinService().getAllSkin(siteId));
		return doLayout(VWBContext.getContext(request));
	}
	
	
}
